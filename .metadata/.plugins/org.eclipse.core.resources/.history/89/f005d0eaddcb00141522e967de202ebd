/**
 * 
 * This file is part of the FilmFinder Project, written as 
 * part of the assessment for CAB302, Semester 1, 2015. 
 *
 * FilmFinder	` 
 * asgn1Collection 
 * 13/03/2015
 * 
 */
package asgn1Collection;

import java.util.*;

/**
 * Class to handle an individual movie, implementing the <code>Listing</code> interface 
 * 
 * @author hogan
 *
 */
public class MovieListing implements Listing {
	private String title; 
	private int year; 
	private Set<String> keywords; 
	private BitSet keyVector; 
	
	
	/**
	 * Constructor for the <code>MovieList</code> class 
	 * <code>keyVector</code> has meaning only w.r.t. a full 
	 * <code>asgn1Collection</code> lexicon, and 
	 * so requires keywords from across the collection for initialisation.  
	 * 
	 * @param title <code>String<code> containing movie title
	 * @param year <code>int</code> containing year in which the movie was made 
	 * @throws ListingException if <code>isNull(title) OR isEmpty(title) OR year <=0</code>
	 */
	public MovieListing(String title,int year) throws ListingException {
		if (nullOrEmpty(title)) {
			throw new ListingException("Movie title is null or empty");
		}
		if (year<=0) {
			throw new ListingException("Year must be positive");
		}
		this.title=title;
		this.year=year;
		this.keywords=new TreeSet<String>(); 
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#addKeyword(java.lang.String)
	 */
	@Override
	public void addKeyword(String kw) throws ListingException {
		if (nullOrEmpty(kw)) {
			throw new ListingException("Invalid keyword");
		}
		this.keywords.add(kw);
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#findSimilarity(asgn1Collection.Listing)
	 */
	@Override
	public int findSimilarity(Listing l) throws ListingException {
		if (this.keyVector==null) {
			throw new ListingException("KeyVectors not available");
		}
		if (l==null){
			//if not null, will have keyVectors if *this* does  
			throw new ListingException("Argument listing is null");
		}
		BitSet bs = (BitSet) this.keyVector.clone(); 
		bs.and(l.getKeyVector());
		return bs.cardinality();
	}
	
	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#getKeyVector()
	 */
	@Override
	public BitSet getKeyVector() throws ListingException {
		if (this.keyVector==null) {
			throw new ListingException("KeyVectors not available");
		}
		return keyVector;
	}
	
	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#getKeywords()
	 */
	@Override
	public Set<String> getKeywords() {
		return keywords;
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#getTitle()
	 */
	@Override
	public String getTitle() {
		return title;
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#getYear()
	 */
	@Override
	public int getYear() {
		return year;
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#numKeywords()
	 */
	@Override
	public int numKeywords() {
		return this.keywords.size();
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#setKeyVector(java.util.BitSet)
	 */
	@Override
	public void setKeyVector(BitSet bs) {
		this.keyVector = bs;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return this.title + ":" + this.year + ":" + "Active keywords:" + this.numKeywords();
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#writeKeyVector()
	 */
	@Override
	public String writeKeyVector() throws ListingException {
		if (this.keyVector==null) {
			throw new ListingException("KeyVector is null");
		}
		return this.keyVector.toString();
	}

	/* (non-Javadoc)
	 * @see asgn1Collection.Listing#writeKeywords()
	 */
	public String writeKeywords() {
		String str=""; int index=0;
		for (String kw : this.keywords) {
			str += kw +":"; 
			index++;
			if ((index % 10)==0) {
				str += "\n";
			}
		}
		return str;
	}
	
	/**
	 * Helper method to simplify tests for null or empty strings 
	 * 
	 * @param str <code>String</code> to be tested 
	 * @return <code>true</code> if <code>isNull(str) OR isEmpty(str)</code>
	 */
	private boolean nullOrEmpty(String str) {
		return (str==null)||(str.isEmpty());
	}
}